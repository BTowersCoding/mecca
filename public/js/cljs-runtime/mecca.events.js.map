{"version":3,"sources":["mecca/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","_","js/AudioContext","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3","day8.re_frame.undo.undoable.cljs$core$IFn$_invoke$arity$1","p__42164","vec__42165","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","db","time","pitch","cljs.core.update.cljs$core$IFn$_invoke$arity$3","note","p1__42163#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p__42168","vec__42169","file","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p__42172","vec__42173","samples","p__42176","vec__42177","beats-per-measure","p__42180","vec__42181","notes","p__42184","vec__42185","new-time","p__42188","vec__42189","mecca.music/play-song!","cljs.core/deref","G__42192","re-frame.core/subscribe","p__42193","vec__42194","p__42197","vec__42198","cljs.core/not","p__42201","vec__42202","p__42205","vec__42206","p__42209","vec__42210","p__42213","vec__42214","p__42217","vec__42218","G__42221","re-frame.core/dispatch","p__42222","vec__42223","pos","p__42226","vec__42227","instrument","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","p__42230","vec__42231","p__42236","vec__42237","G__42240","beat","G__42241","to-play","p1__42234#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","G__42242","p1__42235#","p__42244","vec__42245","beats","p1__42243#","p__42249","vec__42250","p1__42248#","p__42253","vec__42254","p__42258","vec__42259","p1__42257#","p__42262","vec__42263","p__42266","vec__42267","tempo","p__42271","vec__42272","p1__42270#","p__42276","vec__42277","p1__42275#","p__42280","vec__42281","key","p__42284","vec__42285","p__42288","vec__42289","x","p__42293","vec__42294","G__42297","seconds-per-beat","p1__42292#","cljs.core/inc","p__42298","vec__42299","mecca.music/play-note","p__42303","vec__42304","G__42307","G__42308","p1__42302#","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/into","p__42309","vec__42310","G__42313","G__42314","mecca.music/play-sample","G__42315","cljs.core/conj","G__42316","p__42320","vec__42321","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","G__42327","G__42328","p1__42318#","p1__42317#","cljs.core.get.cljs$core$IFn$_invoke$arity$2","G__42329","p1__42319#","p__42330","vec__42331","p__42334","vec__42335","xml","p__42338","vec__42339","p__42342","vec__42343","G__42346","mecca.songs.megaman/megaman","p__42347","vec__42348","G__42351","mecca.songs.city/city","p__42352","vec__42353","G__42356","mecca.songs.zelda/zelda"],"sourcesContent":["(ns mecca.events\r\n  (:require\r\n   [re-frame.core :refer [reg-event-db reg-event-fx dispatch subscribe]]\r\n   [re-pressed.core :as rp]\r\n   [day8.re-frame.undo :as undo :refer [undoable]]\r\n   [mecca.mario :as mario :refer [mario]]\r\n   [mecca.songs.megaman :as megaman]\r\n   [mecca.songs.zelda :as zelda]\r\n   [mecca.songs.city :as city]\r\n   [mecca.music :as music]\r\n   [goog.events :refer [listen unlisten]])\r\n  (:import [goog.events EventType]))\r\n\r\n(reg-event-db\r\n :initialize-db\r\n (fn [_ _]\r\n   {:audio-context (js/AudioContext.)\r\n    :samples nil\r\n    :focused-note-pos [nil nil]\r\n    :eraser? false\r\n    :playing? false\r\n    :play-start 0\r\n    :jumping? false\r\n    :sharp? false\r\n    :repeat? false\r\n    :loop-end nil\r\n    :current-position 0\r\n    :current-note 0\r\n    :next-note-time 0.0\r\n    :notes-in-queue []\r\n    :editor-beat-start 1\r\n    :instrument 1\r\n    :array-buffer nil\r\n    :time 0\r\n    :time-signature 4\r\n    :tempo 120\r\n    :notes []\r\n    :mario-x 16\r\n    :mario-y 61\r\n    :mario-jump 0\r\n    :mario-run 1\r\n    :xml \"\"\r\n    :file-upload \"\"\r\n    :sample-edit? false}))\r\n\r\n(reg-event-db\r\n :remove-note\r\n (undoable \"remove note\")\r\n (fn [db [_ time pitch]]\r\n   (update db :notes\r\n           (fn [note]\r\n             (remove #(and (= time (:time %))\r\n                           (= pitch (:pitch %)))\r\n                     note)))))\r\n\r\n(reg-event-db\r\n :file-upload\r\n (fn [db [_ file]]\r\n      (assoc db :file-upload file)))\r\n\r\n(reg-event-db\r\n :load-samples\r\n (fn [db [_ samples]]\r\n   (assoc db :samples samples)))\r\n\r\n(reg-event-db\r\n :set-time-signature\r\n (fn [db [_ beats-per-measure]]\r\n   (update db :time-signature beats-per-measure)))\r\n\r\n(reg-event-db\r\n :set-notes\r\n (fn [db [_ notes]]\r\n   (assoc db :notes notes)))\r\n\r\n(reg-event-db                 ;; usage:  (dispatch [:timer a-js-Date])\r\n :timer                         ;; every second an event of this kind will be dispatched\r\n (fn [db [_ new-time]]          ;; note how the 2nd parameter is destructured to obtain the data value\r\n   (assoc db :time new-time)))\r\n\r\n(reg-event-db\r\n :play-on\r\n (fn [db [_ _]]\r\n   (music/play-song!)\r\n   (assoc\r\n    (assoc db :play-start (.-currentTime @(subscribe [:audio-context])))\r\n    :playing? true)\r\n    ))\r\n\r\n(reg-event-db\r\n :sharp-on\r\n (fn [db [_ _]]\r\n   (assoc db :sharp? true)))\r\n\r\n(reg-event-db\r\n :sample-edit-toggle\r\n (fn [db [_ _]]\r\n   (update db :sample-edit? not)))\r\n\r\n(reg-event-db\r\n :sharp-toggle\r\n (fn [db [_ _]]\r\n   (update db :sharp? not)))\r\n\r\n(reg-event-db\r\n :eraser-toggle\r\n (fn [db [_ _]]\r\n   (update db :eraser? not)))\r\n\r\n(reg-event-db\r\n :sharp-off\r\n (fn [db [_ _]]\r\n   (assoc db :sharp? false)))\r\n\r\n(reg-event-db\r\n :pause\r\n (fn [db [_ _]]\r\n   (assoc db :playing? false)))\r\n\r\n(reg-event-db\r\n :stop\r\n (fn [db [_ _]]\r\n   (dispatch [:reset-editor])\r\n   (assoc\r\n    (assoc db :playing? false)\r\n    :current-position 0)))\r\n\r\n(reg-event-db\r\n :update-focus-note\r\n (fn [db [_ pos]]\r\n   (assoc db :focused-note-pos pos)))\r\n\r\n(reg-event-db\r\n :select-instrument\r\n (fn [db [_ instrument]]\r\n   (assoc db \r\n          :instrument instrument\r\n          :eraser? false)))\r\n\r\n(reg-event-db\r\n :play-off\r\n (fn [db [_ _]]\r\n   (assoc db :playing? false)))\r\n\r\n(reg-event-db\r\n :advance-position\r\n (fn [db [_ _]]\r\n   (let [notes (subscribe [:notes])\r\n         beat (subscribe [:current-position])\r\n         to-play (filter #(= (+ 1 @beat) (:time %)) @notes)]\r\n     (if (< 4 @beat)\r\n       (dispatch [:advance-editor 0.5]))\r\n     #_(doall (for [{:keys [instrument pitch]} to-play]\r\n                (music/play-sample instrument (if @(subscribe [:sharp?]) (+ 0.5 pitch) pitch))))\r\n     (update db :current-position #(+ 0.5 %)))))\r\n\r\n(reg-event-db\r\n :advance-editor\r\n (fn [db [_ beats]]\r\n   (update db :editor-beat-start #(+ beats %))))\r\n\r\n(reg-event-db\r\n :move-mario\r\n (fn [db [_ _]]\r\n   (update db :mario-x #(+ 10 %))))\r\n\r\n(reg-event-db\r\n :reset-editor\r\n (fn [db [_ _]]\r\n   (assoc (assoc db :editor-beat-start 1)\r\n          :mario-x 16)))\r\n\r\n(reg-event-db\r\n :retract-editor\r\n (fn [db [_ _]]\r\n   (update db :editor-beat-start #(- % 0.5))))\r\n\r\n(reg-event-db\r\n :reset-position\r\n (fn [db [_ _]]\r\n   (assoc db :current-position 0)))\r\n\r\n(reg-event-db\r\n :set-tempo\r\n (fn [db [_ tempo]]\r\n   (assoc db :tempo tempo)))\r\n\r\n(reg-event-db\r\n :inc-tempo\r\n (fn [db [_ tempo]]\r\n   (update db :tempo #(+ 8 %))))\r\n\r\n(reg-event-db\r\n :dec-tempo\r\n (fn [db [_ tempo]]\r\n   (update db :tempo #(- % 8))))\r\n\r\n(reg-event-db\r\n :set-key\r\n (fn [db [_ key]]\r\n   (assoc db :key key)))\r\n\r\n(reg-event-db\r\n :repeat-toggle\r\n (fn [db [_ _]]\r\n   (update db :repeat? not)))\r\n\r\n(reg-event-db\r\n :set-loop-end\r\n (fn [db [_ x]]\r\n   (assoc db :loop-end x)))\r\n\r\n(reg-event-db\r\n :next-note\r\n (fn [db [_ _]]\r\n   (let [tempo (subscribe [:tempo])\r\n         seconds-per-beat (/ 60.0 @tempo)]\r\n     (update \r\n      (update db :current-note inc)\r\n      :next-note-time #(+ % seconds-per-beat)))))\r\n\r\n(reg-event-db\r\n :play-note\r\n (fn [db [_ pitch]]\r\n   (music/play-note pitch)\r\n   (assoc db :notes-in-queue [{:pitch pitch\r\n                               :time  0}])))\r\n\r\n(reg-event-db\r\n :schedule-note\r\n (fn [db [_ _]]\r\n   (let [notes (subscribe [:notes])\r\n         beat (subscribe [:current-note])\r\n         to-play (filter #(= (+ 1 @beat) (:time %)) @notes)]\r\n     (update db :notes-in-queue\r\n             into to-play))))\r\n\r\n(reg-event-db\r\n :add-note\r\n (undoable \"add note\")\r\n (fn [db [_ instrument time pitch]]\r\n   (if (= (.-state @(subscribe [:audio-context])) \"suspended\")\r\n     (.resume @(subscribe [:audio-context])))\r\n   (music/play-sample instrument (if @(subscribe [:sharp?]) (inc pitch) pitch))\r\n   (update db :notes\r\n           conj \r\n           {:time time\r\n            :instrument instrument\r\n            :pitch (if @(subscribe [:sharp?])\r\n                    (inc pitch) pitch)})))\r\n\r\n\r\n;; TODO This is gross.\r\n;; Make it so the run counter only runs when needed.\r\n;; But this tick function needs to be refactored.\r\n;; Seriously it's like 50 shades of awful.\r\n;; Read about effectful handlers some more,\r\n;; and learn to use reg-event-fx.\r\n\r\n(reg-event-db\r\n :tick!\r\n (fn [db [_ _]]\r\n   (if (and (not= 0 @(subscribe [:mario-jump]))\r\n            @(subscribe [:playing?]))\r\n     (assoc\r\n      (update\r\n       (update db :mario-run #(if (= % 12) 0 (inc %)))\r\n       :mario-jump #(if (= 8 %) 0 (inc %)))\r\n      :mario-y (- 61\r\n                  (get [5 10 15 25 30 25 15 5]\r\n                       @(subscribe [:mario-jump]))))\r\n     (update db :mario-run #(if (= % 12) 0 (inc %))))))\r\n\r\n(reg-event-db\r\n :jump!\r\n (fn [db [_ _]]\r\n   (assoc db :mario-jump 1)))\r\n\r\n(reg-event-db\r\n :submit-xml\r\n (fn [db [_ xml]]\r\n   (assoc db :xml xml)))\r\n\r\n(reg-event-db\r\n :load-song\r\n (fn [db [_ notes]]\r\n   (assoc db :notes notes)))\r\n\r\n(reg-event-db\r\n :load-megaman\r\n (fn [db [_ notes]]\r\n   (dispatch [:set-tempo 260])\r\n   (assoc db :notes\r\n          megaman/megaman)))\r\n\r\n(reg-event-db\r\n :load-castle\r\n (fn [db [_ notes]]\r\n   (dispatch [:set-tempo 150])\r\n   (assoc db :notes city/city)))\r\n\r\n(reg-event-db\r\n :load-zelda\r\n (fn [db [_ notes]]\r\n   (dispatch [:set-tempo 390])\r\n   (assoc db :notes zelda/zelda)))\r\n\r\n"]}
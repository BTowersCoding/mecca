{"version":3,"sources":["mecca/music.cljs"],"mappings":"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","names":["mecca.music/mario-jump","beat","G__71477","re-frame.core/subscribe","notes","G__71478","jump","G__71479","and__4174__auto__","cljs.core/deref","G__71482","cljs.core/count","p1__71476#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__71483","re-frame.core/dispatch","mecca.music/mario-move","G__71485","playing?","G__71486","now","G__71487","length","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/max","p1__71484#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","started","G__71488","elapsed","beat-length","G__71489","end-time","current-beat","last-drawn-pos","G__71490","G__71491","G__71492","G__71493","mecca.music/dispatch-timer-event","G__71494","js/mecca","js/mecca.music","js/mecca.music.do-timer","mecca.music/do-timer","js/setInterval","mecca.music/load-sound","named-url","out","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0","req","js/XMLHttpRequest","e","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.async/close!","mecca.music/decode","G__71495","decoded-buffer","js/console","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","mecca.music/buffer-source","buffer","source","G__71496","mecca.music/get-and-decode","c__29789__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__29790__auto__","switch__29585__auto__","state_71508","state_val_71509","inst_71497","cljs.core.async.impl.ioc-helpers/take!","inst_71499","statearr-71510","statearr-71511","statearr-71512","inst_71501","statearr-71513","inst_71506","cljs.core.async.impl.ioc-helpers/return-chan","inst_71503","statearr-71514","statearr-71515","state-machine__29586__auto__","ret-value__29587__auto__","result__29588__auto__","cljs.core/keyword-identical?","e71516","js/Object","ex__29589__auto__","statearr-71517","cljs.core.async.impl.ioc-helpers/process-exception","state__29791__auto__","statearr-71518","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","mecca.music/load-samples","state_71547","state_val_71548","inst_71519","cljs.core/PersistentHashMap","inst_71520","inst_71521","inst_71522","statearr-71549","statearr-71550","inst_71524","inst_71525","inst_71526","cljs.core/not","statearr-71551","statearr-71552","inst_71545","inst_71528","inst_71529","inst_71530","inst_71531","inst_71532","inst_71533","statearr-71553","statearr-71554","inst_71543","statearr-71555","inst_71535","inst_71536","inst_71537","inst_71538","inst_71539","statearr-71556","statearr-71557","statearr-71558","e71559","statearr-71560","statearr-71561","cljs.core.range.cljs$core$IFn$_invoke$arity$2","cljs.core/first","cljs.core/rest","js/mecca.music.loading-samples","mecca.music/loading-samples","state_71571","state_val_71572","inst_71562","cljs.core/PersistentVector","inst_71563","statearr-71573","inst_71565","inst_71566","inst_71567","inst_71568","inst_71569","statearr-71574","statearr-71575","e71576","statearr-71577","statearr-71578","mecca.music/add-semitone","rate","js/Math","mecca.music/sub-semitone","mecca.music/inc-rate","semis","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","mecca.music/dec-rate","mecca.music/pitch->rate","midi-num","mecca.music/detune-cents","mecca.music/computedPlaybackRate","detune","playbackRate","mecca.music/play-note","pitch","context","G__71579","samples","G__71580","instrument","G__71581","audio-buffer","cljs.core.get.cljs$core$IFn$_invoke$arity$2","sample-source","mecca.music/createFadeBuffer","activeTime","fadeTime","length1","length2","p","fadeLength","fadeIndex1","fadeIndex2","seq__71582","cljs.core/seq","chunk__71583","count__71584","i__71585","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/next","i","cljs.core.range.cljs$core$IFn$_invoke$arity$1","seq__71586","chunk__71587","count__71588","i__71589","mecca.music/createDelayTimeBuffer","shiftUp","seq__71590","chunk__71591","count__71592","i__71593","seq__71594","chunk__71595","count__71596","i__71597","mecca.music/delayTime","mecca.music/fadeTime","mecca.music/bufferTime","mecca.music/previousPitch","mecca.music/play-time-stretched","G__71598","current-time","G__71599","input","output","mod1","mod2","mod3","mod4","mod1Gain","mod2Gain","mod3Gain","mod4Gain","modGain1","modGain2","delay1","delay2","fade1","fade2","fadeBuffer","mix1","mix2","t","t2","shiftDownBuffer","shiftUpBuffer","mecca.music/play-sample","G__71600","G__71601","compressor","analyser","mecca.music/play-at","time","G__71602","G__71603","mecca.music/delay-note","beats","note","p1__71604#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","mecca.music/advance-note","p1__71605#","mecca.music/queue-section","from","to","G__71608","G__71609","tempo","G__71610","section","p1__71606#","advanced","p1__71607#","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","iter__4582__auto__","s__71612","cljs.core/LazySeq","c__4580__auto__","size__4581__auto__","b__71614","cljs.core/chunk-buffer","i__71613","map__71615","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__71611","map__71617","cljs.core/cons","mecca.music/play-section","G__71621","G__71622","G__71623","p1__71619#","p1__71620#","s__71625","b__71627","i__71626","map__71628","iter__71624","map__71630","mecca.music/play-notes","n","editor-start","G__71632","G__71633","G__71634","play-pos","G__71635","mecca.music/play-from-here","G__71637","G__71638","p1__71636#","mecca.music/play-song!","G__71639","G__71640","G__71641","G__71642","s__71644","b__71646","i__71645","map__71647","iter__71643","map__71649","mecca.music/get-bytes!","freq-data"],"sourcesContent":["(ns mecca.music\r\n  (:require\r\n   [cljs.core.async :refer [<! chan put! close!]]\r\n   [re-frame.core :as rf :refer [subscribe dispatch]])\r\n  (:require-macros\r\n   [cljs.core.async.macros :refer [go go-loop]]))\r\n\r\n(defn mario-jump []\r\n  (let [beat (subscribe [:current-position])\r\n        notes (subscribe [:notes])\r\n        jump (subscribe [:mario-jump])]\r\n    (when (and @(subscribe [:playing?])\r\n               (zero? @jump))\r\n      (if (< 0 (count (filter #(= (:time %) (inc @beat))\r\n                              @notes)))\r\n        (dispatch [:jump!])))))\r\n\r\n(defn mario-move []\r\n  (let [notes (subscribe [:notes])\r\n        playing? @(subscribe [:playing?])\r\n        now (.-currentTime @(subscribe [:audio-context]))\r\n        length (apply max (map #(:time %) @notes))\r\n        started (subscribe [:play-start])\r\n        elapsed (- now @started)\r\n        beat-length (/ 60 @(subscribe [:tempo]))\r\n        end-time (+ @started (* beat-length 4))\r\n        current-beat (/ elapsed beat-length)\r\n        last-drawn-pos (subscribe [:current-position])]\r\n    (when playing?\r\n      (if (< length current-beat)\r\n        (dispatch [:play-off])\r\n        (if (< @last-drawn-pos current-beat)\r\n          (do (dispatch [:move-mario])\r\n              (dispatch [:advance-position])))))\r\n    (mario-jump)))\r\n\r\n(defn dispatch-timer-event []\r\n  (dispatch [:tick!])\r\n  (mario-move))\r\n\r\n(defonce do-timer\r\n  (js/setInterval dispatch-timer-event 60))\r\n\r\n(defn load-sound [named-url]\r\n  (let [out (chan)\r\n        req (js/XMLHttpRequest.)]\r\n    (set! (.-responseType req) \"arraybuffer\")\r\n    (set! (.-onload req) (fn [e]\r\n                           (if (= (.-status req) 200)\r\n                             (do (put! out (assoc named-url :buffer (.-response req)))\r\n                                 (close! out))\r\n                             (close! out))))\r\n    (.open req \"GET\" (:url named-url) true)\r\n    (.send req)\r\n    out))\r\n\r\n(defn decode [named-url]\r\n  (let [out (chan)]\r\n    (if (:buffer named-url)\r\n      (do\r\n        (.decodeAudioData\r\n         @(subscribe [:audio-context]) (:buffer named-url)\r\n         (fn [decoded-buffer]\r\n           (put! out (assoc named-url :decoded-buffer decoded-buffer))\r\n           (close! out))\r\n         (fn []\r\n           (.error js/console \"Error loading file \" (prn named-url))\r\n           (close! out))))\r\n      (close! out))\r\n    out))\r\n\r\n(defn buffer-source [buffer]\r\n  (let [source (.createBufferSource @(subscribe [:audio-context]))]\r\n    (set! (.-buffer source) buffer)\r\n    source))\r\n\r\n(defn get-and-decode [named-url]\r\n  (go\r\n    (when-let [s (<! (load-sound named-url))]\r\n      (<! (decode s)))))\r\n\r\n(defn load-samples []\r\n  (go-loop [result {}\r\n            sounds (range 1 19)]\r\n    (if-not (nil? (first sounds))\r\n      (let [sound (first sounds)\r\n            decoded-buffer (<! (get-and-decode {:url (str \"/audio/\" sound \".mp3\")\r\n                                                :sound sound}))]\r\n        (prn sound)\r\n        (prn decoded-buffer)\r\n        (recur (assoc result sound decoded-buffer)\r\n               (rest sounds)))\r\n      result)))\r\n\r\n(defonce loading-samples\r\n  (go\r\n    (dispatch [:load-samples  (<! (load-samples))])\r\n    (prn \"Samples loaded\")))\r\n\r\n(defn add-semitone [rate]\r\n  (* rate (.pow js/Math 2 (/ 1 12))))\r\n\r\n(defn sub-semitone [rate]\r\n  (* rate (.pow js/Math 2 (/ -1 12))))\r\n\r\n(defn inc-rate [semis]\r\n  (reduce add-semitone (repeat semis 1)))\r\n\r\n(defn dec-rate [semis]\r\n  (reduce sub-semitone (repeat semis 1)))\r\n\r\n(defn pitch->rate [midi-num]\r\n  (if (< 66 midi-num)\r\n    (inc-rate (- midi-num 66))\r\n    (dec-rate (- 68 midi-num))))\r\n\r\n(defn detune-cents [midi-num]\r\n  (if (< 66 midi-num)\r\n    (* 100 (- midi-num 66))\r\n    (* -100 (- 68 midi-num))))\r\n\r\n(defn computedPlaybackRate [detune playbackRate]\r\n  (* playbackRate (.pow js/Math 2 (/ detune 1200))))\r\n\r\n(detune-cents 72)\r\n\r\n(defn play-note [pitch]\r\n  (let [context       @(subscribe [:audio-context])\r\n        samples       (subscribe [:samples])\r\n        instrument    (subscribe [:instrument])\r\n        audio-buffer  (:decoded-buffer (get @samples @instrument))\r\n        sample-source (.createBufferSource context)]\r\n    (set! (.-buffer sample-source) audio-buffer)\r\n    (.setValueAtTime\r\n     (.-detune sample-source)\r\n     (detune-cents pitch)\r\n     (.-currentTime context))\r\n    (.setValueAtTime\r\n     (.-playbackRate sample-source)\r\n     (computedPlaybackRate (detune-cents pitch) 1)\r\n     (.-currentTime context))\r\n    (.connect sample-source (.-destination context))\r\n    (.start sample-source)\r\n    sample-source))\r\n\r\n(computedPlaybackRate (detune-cents 72) (pitch->rate 72))\r\n\r\n\r\n;; pitch shift via Delay-Line Modulation\r\n;; ported from: https://github.com/cwilso/Audio-Input-Effects/blob/main/js/jungle.js\r\n(defn createFadeBuffer [context activeTime fadeTime]\r\n  (let [length1 (* activeTime (.-sampleRate context))\r\n        length2 (* (- activeTime (* 2 fadeTime))\r\n                   (.-sampleRate context))\r\n        length (+ length1 length2)\r\n        buffer (.createBuffer context\r\n                              1\r\n                              length\r\n                              (.-sampleRate context))\r\n        p (.getChannelData buffer 0)\r\n        fadeLength (* fadeTime (.-sampleRate context))\r\n        fadeIndex1 fadeLength\r\n        fadeIndex2 (- length1 fadeLength)]\r\n    (.log js/console (str \"createFadeBuffer() length = \" length))\r\n    (doseq [i (range length1)]\r\n     (cond (< i fadeIndex1)\r\n           (aset p i (.sqrt js/Math (/ i fadeLength)))\r\n           (>= i fadeIndex2)\r\n           (aset p i (.sqrt js/Math\r\n                            (- 1\r\n                               (/ (- i fadeIndex2) fadeLength))))\r\n           :else \r\n           (aset p i 1)))\r\n\r\n    (doseq [i (range length1 length)]\r\n      (aset p i 0))\r\n    buffer))\r\n\r\n(defn createDelayTimeBuffer [context activeTime fadeTime shiftUp]\r\n  (let [length1 (* activeTime (.-sampleRate context))\r\n        length2 (* (- activeTime (* 2 fadeTime))\r\n                   (.-sampleRate context))\r\n        length (+ length1 length2)\r\n        buffer (.createBuffer context\r\n                              1\r\n                              length\r\n                              (.-sampleRate context))\r\n        p (.getChannelData buffer 0)]\r\n    (.log js/console\r\n          (str \"createDelayTimeBuffer() length = \" length))\r\n    (doseq [i (range length1)]\r\n      (if shiftUp\r\n        (aset p i (/ (- length1 i) length))\r\n        (aset p i (/ i length1))))\r\n      (doseq [i (range length)] \r\n        (aset p i 0))\r\n      buffer))\r\n\r\n(def delayTime -1)\r\n\r\n(def fadeTime 0.05)\r\n\r\n(def bufferTime 2)\r\n\r\n(def previousPitch -1)\r\n\r\n(defn play-time-stretched [instrument pitch]\r\n  (let [context         (subscribe [:audio-context])\r\n        current-time    (.-currentTime @context)\r\n        samples         (subscribe [:samples])\r\n        audio-buffer    (:decoded-buffer (get @samples instrument))\r\n        sample-source   (.createBufferSource @context)\r\n        input           (.createGain @context)\r\n        output          (.createGain @context)\r\n        mod1            (.createBufferSource @context)\r\n        mod2            (.createBufferSource @context)\r\n        mod3            (.createBufferSource @context)\r\n        mod4            (.createBufferSource @context)\r\n        mod1Gain        (.createGain @context)\r\n        mod2Gain        (.createGain @context)\r\n        mod3Gain        (.createGain @context)\r\n        mod4Gain        (.createGain @context)\r\n        modGain1        (.createGain @context)\r\n        modGain2        (.createGain @context)\r\n        delay1          (.createDelay @context)\r\n        delay2          (.createDelay @context)\r\n        fade1           (.createBufferSource @context)\r\n        fade2           (.createBufferSource @context)\r\n        fadeBuffer      (createFadeBuffer @context bufferTime fadeTime)\r\n        mix1            (.createGain @context)\r\n        mix2            (.createGain @context)\r\n        t               (+ (.-currentTime @context) 0.05)\r\n        t2              (- (+ t bufferTime) fadeTime)\r\n        shiftDownBuffer (createDelayTimeBuffer @context bufferTime fadeTime false)\r\n        shiftUpBuffer   (createDelayTimeBuffer @context bufferTime fadeTime true)]\r\n    (set! (.-buffer sample-source) audio-buffer)\r\n    (set! (.-buffer mod1) shiftDownBuffer)\r\n    (set! (.-buffer mod2) shiftDownBuffer)\r\n    (set! (.-buffer mod3) shiftUpBuffer)\r\n    (set! (.-buffer mod4) shiftUpBuffer)\r\n    (set! (.-loop mod1) true)\r\n    (set! (.-loop mod2) true)\r\n    (set! (.-loop mod3) true)\r\n    (set! (.-loop mod4) true)\r\n    (set! (-> mod3Gain .-gain .-value) 0)\r\n    (set! (-> mod4Gain .-gain .-value) 0)\r\n    (.connect mod1 mod1Gain)\r\n    (.connect mod2 mod2Gain)\r\n    (.connect mod3 mod3Gain)\r\n    (.connect mod4 mod4Gain)\r\n    (.connect mod1Gain modGain1)\r\n    (.connect mod2Gain modGain2)\r\n    (.connect mod3Gain modGain1)\r\n    (.connect mod4Gain modGain2)\r\n    (.connect modGain1 (.-delayTime delay1))\r\n    (.connect modGain2 (.-delayTime delay2))\r\n    (set! (.-buffer fade1) fadeBuffer)\r\n    (set! (.-buffer fade2) fadeBuffer)\r\n    (set! (.-loop fade1) true)\r\n    (set! (.-loop fade2) true)\r\n    (set! (-> mix1 .-gain .-value) 0)\r\n    (set! (-> mix2 .-gain .-value) 0)\r\n    (.connect fade1 (.-gain mix1))\r\n    (.connect fade2 (.-gain mix2))\r\n    (.connect sample-source input)\r\n    (.connect input delay1)\r\n    (.connect input delay2)\r\n    (.connect delay1 mix1)\r\n    (.connect delay2 mix2)\r\n    (.connect mix1 output)\r\n    (.connect mix2 output)\r\n    (.connect output (.-destination @context))\r\n    (.start mod1 t)\r\n    (.start mod2 t2)\r\n    (.start mod3 t)\r\n    (.start mod4 t2)\r\n    (.start fade1 t)\r\n    (.start fade2 t2)\r\n    (.start sample-source)\r\n    (set! (-> modGain1 .-gain .-value) 1)\r\n    (set! (-> modGain2 .-gain .-value) 1)\r\n    (.setTargetAtTime (.-gain modGain1) (* 1 delayTime) 0 0.01)\r\n    (.setTargetAtTime (.-gain modGain2) (* 1 delayTime) 0 0.01)))\r\n\r\n(play-time-stretched 1 70)\r\n\r\n(defn play-sample [instrument pitch]\r\n  (let [context (subscribe [:audio-context])\r\n        samples (subscribe [:samples])\r\n        audio-buffer (:decoded-buffer (get @samples instrument))\r\n        sample-source (.createBufferSource @context)\r\n        compressor (.createDynamicsCompressor @context)\r\n        analyser (.createAnalyser @context)]\r\n    (set! (.-buffer sample-source) audio-buffer)\r\n    (.setValueAtTime\r\n     (.-detune sample-source)\r\n     (detune-cents pitch)\r\n     (.-currentTime @context))\r\n    \r\n    (.connect sample-source analyser)\r\n    (.connect sample-source (.-destination @context))\r\n    (.start sample-source)\r\n    sample-source))\r\n\r\n(defn play-at [instrument pitch time]\r\n  (let [context (subscribe [:audio-context])\r\n        samples (subscribe [:samples])\r\n        audio-buffer (:decoded-buffer (get @samples instrument))\r\n        sample-source (.createBufferSource @context)]\r\n    (set! (.-buffer sample-source) audio-buffer)\r\n    (.setValueAtTime\r\n     (.-detune sample-source)\r\n     (detune-cents pitch)\r\n     time)\r\n(.setValueAtTime\r\n (.-playbackRate sample-source)\r\n (computedPlaybackRate (detune-cents pitch) 1)\r\n time)\r\n    (.setValueAtTime\r\n     (.-playbackRate sample-source)\r\n     (pitch->rate pitch)\r\n     time)\r\n    (.connect sample-source (.-destination @context))\r\n    (.start sample-source time)\r\n    sample-source))\r\n\r\n(defn delay-note [beats note]\r\n  (update note :time #(+ beats %)))\r\n\r\n(defn advance-note [beats note]\r\n  (update note :time #(- % beats)))\r\n\r\n(defn queue-section [from to]\r\n  (let [notes (subscribe [:notes])\r\n        started (subscribe [:play-start])\r\n        tempo (subscribe [:tempo])\r\n        section (filter #(<= from (:time %) to) @notes)\r\n        advanced (map #(advance-note from %) section)]\r\n    (doall (for [{:keys [time instrument pitch]} section]\r\n             (play-at instrument pitch (+ @started (* (/ 60 @tempo) time)))))))\r\n\r\n(defn play-section [from to]\r\n  (let [notes (subscribe [:notes])\r\n        now (.-currentTime @(subscribe [:audio-context]))\r\n        tempo (subscribe [:tempo])\r\n        section (filter #(<= from (:time %) to) @notes)\r\n        advanced (map #(advance-note from %) section)]\r\n    (doall (for [{:keys [time instrument pitch]} advanced]\r\n             (play-at instrument pitch (+ now (* (/ 60 @tempo) time)))))))\r\n\r\n(defn play-notes [n]\r\n  (let [editor-start (subscribe [:editor-beat-start])\r\n        tempo (subscribe [:tempo])\r\n        beat-length (/ 60 @(subscribe [:tempo]))\r\n        play-pos (if (< @editor-start 4)\r\n                   @editor-start\r\n                   (+ 4 @(subscribe [:editor-beat-start])))]\r\n    (play-section (dec play-pos) (+ (dec play-pos) (* n 0.5)))))\r\n\r\n(defn play-from-here []\r\n  (let [notes (subscribe [:notes])\r\n        editor-start (subscribe [:editor-beat-start])\r\n        play-pos ;(if (< @editor-start 4)\r\n        @editor-start\r\n                  ; (+ 4 @(subscribe [:editor-beat-start])))\r\n        length (apply max (map #(:time %) @notes))]\r\n    (play-section (dec play-pos) (+ 16 play-pos))))\r\n\r\n(defn play-song! []\r\n  (let [notes (subscribe [:notes])\r\n        now (.-currentTime @(subscribe [:audio-context]))\r\n        tempo (subscribe [:tempo])]\r\n    (dispatch [:reset-position])\r\n    (doall (for [{:keys [time instrument pitch]} @notes]\r\n             (play-at instrument pitch (+ now (* (/ 60 @tempo) time)))))))\r\n\r\n(defn get-bytes! [analyser freq-data]\r\n  (.getByteFrequencyData analyser freq-data)\r\n  freq-data)\r\n"]}
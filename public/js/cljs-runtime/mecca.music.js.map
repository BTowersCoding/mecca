{"version":3,"sources":["mecca/music.cljs"],"mappings":"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","names":["mecca.music/mario-jump","beat","G__45668","re-frame.core/subscribe","notes","G__45669","jump","G__45670","and__4174__auto__","cljs.core/deref","G__45673","cljs.core/count","p1__45667#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__45674","re-frame.core/dispatch","mecca.music/mario-move","G__45676","playing?","G__45677","now","G__45678","length","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/max","p1__45675#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","started","G__45679","elapsed","beat-length","G__45680","end-time","current-beat","last-drawn-pos","G__45681","G__45682","G__45683","G__45684","mecca.music/dispatch-timer-event","G__45685","js/mecca","js/mecca.music","js/mecca.music.do-timer","mecca.music/do-timer","js/setInterval","mecca.music/load-sound","named-url","out","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0","req","js/XMLHttpRequest","e","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.async/close!","mecca.music/decode","G__45686","decoded-buffer","js/console","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","mecca.music/buffer-source","buffer","source","G__45687","mecca.music/get-and-decode","c__36933__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__36934__auto__","switch__36865__auto__","state_45699","state_val_45700","inst_45688","cljs.core.async.impl.ioc-helpers/take!","inst_45690","statearr-45701","statearr-45702","statearr-45703","inst_45692","statearr-45704","inst_45697","cljs.core.async.impl.ioc-helpers/return-chan","inst_45694","statearr-45705","statearr-45706","state-machine__36866__auto__","ret-value__36867__auto__","result__36868__auto__","cljs.core/keyword-identical?","e45707","js/Object","ex__36869__auto__","statearr-45708","cljs.core.async.impl.ioc-helpers/process-exception","state__36935__auto__","statearr-45709","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","mecca.music/load-samples","state_45738","state_val_45739","inst_45710","cljs.core/PersistentHashMap","inst_45711","inst_45712","inst_45713","statearr-45740","statearr-45741","inst_45715","inst_45716","inst_45717","cljs.core/not","statearr-45742","statearr-45743","inst_45736","inst_45719","inst_45720","inst_45721","inst_45722","inst_45723","inst_45724","statearr-45744","statearr-45745","inst_45734","statearr-45746","inst_45726","inst_45727","inst_45728","inst_45729","inst_45730","statearr-45747","statearr-45748","statearr-45749","e45750","statearr-45751","statearr-45752","cljs.core.range.cljs$core$IFn$_invoke$arity$2","cljs.core/first","cljs.core/rest","js/mecca.music.loading-samples","mecca.music/loading-samples","state_45762","state_val_45763","inst_45753","cljs.core/PersistentVector","inst_45754","statearr-45764","inst_45756","inst_45757","inst_45758","inst_45759","inst_45760","statearr-45765","statearr-45766","e45767","statearr-45768","statearr-45769","mecca.music/add-semitone","rate","js/Math","mecca.music/sub-semitone","mecca.music/inc-rate","semis","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","mecca.music/dec-rate","mecca.music/pitch->rate","midi-num","mecca.music/play-note","pitch","context","G__45770","samples","G__45771","instrument","G__45772","audio-buffer","cljs.core.get.cljs$core$IFn$_invoke$arity$2","sample-source","mecca.music/play-sample","G__45773","G__45774","compressor","analyser","mecca.music/play-at","time","G__45775","G__45776","mecca.music/delay-note","beats","note","p1__45777#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","mecca.music/advance-note","p1__45778#","mecca.music/queue-section","from","to","G__45781","G__45782","tempo","G__45783","section","p1__45779#","advanced","p1__45780#","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","iter__4582__auto__","s__45785","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__45787","cljs.core/chunk-buffer","i__45786","map__45788","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__45784","cljs.core/chunk-rest","map__45790","cljs.core/cons","mecca.music/play-section","G__45794","G__45795","G__45796","p1__45792#","p1__45793#","s__45798","b__45800","i__45799","map__45801","iter__45797","map__45803","mecca.music/play-notes","n","editor-start","G__45805","G__45806","G__45807","play-pos","G__45808","mecca.music/play-from-here","G__45810","G__45811","p1__45809#","mecca.music/play-song!","G__45812","G__45813","G__45814","G__45815","s__45817","b__45819","i__45818","map__45820","iter__45816","map__45822","mecca.music/get-bytes!","freq-data","cljs.core/chunk-first"],"sourcesContent":["(ns mecca.music\n  (:require\n   [cljs.core.async :refer [<! timeout chan put! close!]]\n   [re-frame.core :as rf :refer [subscribe dispatch]])\n  (:require-macros\n   [cljs.core.async.macros :refer [go go-loop]]))\n\n(defn mario-jump []\n  (let [beat (subscribe [:current-position])\n        notes (subscribe [:notes])\n        jump (subscribe [:mario-jump])]\n    (when (and @(subscribe [:playing?])\n           (zero? @jump))\n      (if (< 0 (count (filter #(= (:time %) (inc @beat))\n                              @notes)))\n      (dispatch [:jump!])))))\n\n(defn mario-move []\n  (let [notes (subscribe [:notes])\n        playing? @(subscribe [:playing?])\n        now (.-currentTime @(subscribe [:audio-context]))\n        length (apply max (map #(:time %) @notes))\n        started (subscribe [:play-start])\n        elapsed (- now @started)\n        beat-length (/ 60 @(subscribe [:tempo]))\n        end-time (+ @started (* beat-length 4))\n        current-beat (/ elapsed beat-length)\n        last-drawn-pos (subscribe [:current-position])]\n    (when playing?\n      (if (< length current-beat)\n        (dispatch [:play-off])\n        (if (< @last-drawn-pos current-beat)\n          (do (dispatch [:move-mario])\n            (dispatch [:advance-position])))))\n    (mario-jump)))\n\n(defn dispatch-timer-event []\n  (dispatch [:tick!])\n      (mario-move))\n\n(defonce do-timer\n  (js/setInterval dispatch-timer-event 60))\n\n(defn load-sound [named-url]\n  (let [out (chan)\n        req (js/XMLHttpRequest.)]\n    (set! (.-responseType req) \"arraybuffer\")\n    (set! (.-onload req) (fn [e]\n                           (if (= (.-status req) 200)\n                             (do (put! out (assoc named-url :buffer (.-response req)))\n                                 (close! out))\n                             (close! out))))\n    (.open req \"GET\" (:url named-url) true)\n    (.send req)\n    out))\n\n(defn decode [named-url]\n  (let [out (chan)]\n    (if (:buffer named-url)\n      (do\n        (.decodeAudioData\n         @(subscribe [:audio-context]) (:buffer named-url)\n         (fn [decoded-buffer]\n           (put! out (assoc named-url :decoded-buffer decoded-buffer))\n           (close! out))\n         (fn []\n           (.error js/console \"Error loading file \" (prn named-url))\n           (close! out))))\n      (close! out))\n    out))\n\n(defn buffer-source [buffer]\n  (let [source (.createBufferSource @(subscribe [:audio-context]))]\n    (set! (.-buffer source) buffer)\n    source))\n\n(defn get-and-decode [named-url]\n  (go\n    (when-let [s (<! (load-sound named-url))]\n      (<! (decode s)))))\n\n(defn load-samples []\n  (go-loop [result {}\n            sounds (range 1 19)]\n    (if-not (nil? (first sounds))\n      (let [sound (first sounds)                   ; for Github Pages - remove the '/mecca/public' to run locally\n            decoded-buffer (<! (get-and-decode {:url (str \"/mecca/public/audio/\" sound \".mp3\")\n                                                :sound sound}))]\n        (prn sound)\n        (prn decoded-buffer)\n        (recur (assoc result sound decoded-buffer)\n               (rest sounds)))\n      result)))\n\n(defonce loading-samples\n  (go\n   (dispatch [:load-samples  (<! (load-samples))])\n    (prn \"Samples loaded\")))\n\n(defn add-semitone [rate]\n  (* rate (.pow js/Math 2 (/ 1 12))))\n\n(defn sub-semitone [rate]\n  (* rate (.pow js/Math 2 (/ -1 12))))\n\n(defn inc-rate [semis]\n  (reduce add-semitone (repeat semis 1)))\n\n(defn dec-rate [semis]\n  (reduce sub-semitone (repeat semis 1)))\n\n(defn pitch->rate [midi-num]\n  (if (< 66 midi-num)\n    (inc-rate (- midi-num 66))\n    (dec-rate (- 68 midi-num))))\n\n(defn play-note [pitch]\n  (let [context       @(subscribe [:audio-context])\n        samples       (subscribe [:samples])\n        instrument    (subscribe [:instrument])\n        audio-buffer  (:decoded-buffer (get @samples @instrument))\n        sample-source (.createBufferSource context)]\n    (set! (.-buffer sample-source) audio-buffer)\n    (.setValueAtTime\n     (.-playbackRate sample-source)\n     (pitch->rate pitch)\n     (.-currentTime context))\n    (.connect sample-source (.-destination context))\n    (.start sample-source)\n    sample-source))\n\n(defn play-sample [instrument pitch]\n  (let [context (subscribe [:audio-context])\n        samples (subscribe [:samples])\n        audio-buffer (:decoded-buffer (get @samples instrument))\n        sample-source (.createBufferSource @context)\n        compressor (.createDynamicsCompressor @context)\n        analyser (.createAnalyser @context)]\n    (set! (.-buffer sample-source) audio-buffer)\n    (.setValueAtTime\n     (.-playbackRate sample-source)\n     (pitch->rate pitch)\n     (.-currentTime @context))\n    (.connect sample-source analyser)\n    (.connect sample-source (.-destination @context))\n    (.start sample-source)\n    sample-source))\n\n(defn play-at [instrument pitch time]\n  (let [context (subscribe [:audio-context])\n        samples (subscribe [:samples])\n        audio-buffer (:decoded-buffer (get @samples instrument))\n        sample-source (.createBufferSource @context)]\n    (set! (.-buffer sample-source) audio-buffer)\n    (.setValueAtTime\n     (.-playbackRate sample-source)\n     (pitch->rate pitch)\n     time)\n    (.connect sample-source (.-destination @context))\n    (.start sample-source time)\n    sample-source))\n\n(defn delay-note [beats note]\n  (update note :time #(+ beats %)))\n\n(defn advance-note [beats note]\n  (update note :time #(- % beats)))\n\n(defn queue-section [from to]\n  (let [notes (subscribe [:notes])\n        started (subscribe [:play-start])\n        tempo (subscribe [:tempo])\n        section (filter #(<= from (:time %) to) @notes)\n        advanced (map #(advance-note from %) section)]\n    (doall (for [{:keys [time instrument pitch]} section]\n             (play-at instrument pitch (+ @started (* (/ 60 @tempo) time)))))))\n\n(defn play-section [from to]\n  (let [notes (subscribe [:notes])\n        now (.-currentTime @(subscribe [:audio-context]))\n        tempo (subscribe [:tempo])\n        section (filter #(<= from (:time %) to) @notes)\n        advanced (map #(advance-note from %) section)]\n    (doall (for [{:keys [time instrument pitch]} advanced]\n             (play-at instrument pitch (+ now (* (/ 60 @tempo) time)))))))\n\n(defn play-notes [n]\n  (let [editor-start (subscribe [:editor-beat-start])\n        tempo (subscribe [:tempo])\n        beat-length (/ 60 @(subscribe [:tempo]))\n        play-pos (if (< @editor-start 4)\n                   @editor-start\n                   (+ 4 @(subscribe [:editor-beat-start])))]\n    (play-section (dec play-pos) (+ (dec play-pos) (* n 0.5)))))\n\n(defn play-from-here []\n  (let [notes (subscribe [:notes])\n        editor-start (subscribe [:editor-beat-start])\n        play-pos ;(if (< @editor-start 4)\n                   @editor-start\n                  ; (+ 4 @(subscribe [:editor-beat-start])))\n        length (apply max (map #(:time %) @notes))]\n    (play-section (dec play-pos) (+ 16 play-pos))))\n\n(defn play-song! []\n  (let [notes (subscribe [:notes])\n        now (.-currentTime @(subscribe [:audio-context]))\n        tempo (subscribe [:tempo])]\n    (dispatch [:reset-position])\n    (doall (for [{:keys [time instrument pitch]} @notes]\n             (play-at instrument pitch (+ now (* (/ 60 @tempo) time)))))))\n\n(defn get-bytes! [analyser freq-data]\n  (.getByteFrequencyData analyser freq-data)\n  freq-data)\n"]}
{"version":3,"sources":["mecca/upload.cljs"],"mappings":"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","names":["mecca.upload/first-file","cljs.core.map.cljs$core$IFn$_invoke$arity$1","e","target","file","mecca.upload/extract-result","p1__44566#","mecca.upload/upload-reqs","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2","mecca.upload/file-reads","mecca.upload/put-upload","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","c__36933__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__36934__auto__","switch__36865__auto__","state_44580","state_val_44581","statearr-44582","inst_44569","js/FileReader","statearr-44583","cljs.core.async.impl.ioc-helpers/take!","inst_44578","cljs.core.async.impl.ioc-helpers/return-chan","inst_44572","inst_44573","p1__44567#","inst_44574","inst_44575","statearr-44584","statearr-44587","statearr-44588","state-machine__36866__auto__","ret-value__36867__auto__","result__36868__auto__","cljs.core/keyword-identical?","e44589","js/Object","ex__36869__auto__","statearr-44590","cljs.core.async.impl.ioc-helpers/process-exception","state__36935__auto__","statearr-44591","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","reader","state_44605","state_val_44606","statearr-44607","inst_44594","cljs.core/PersistentVector","statearr-44608","inst_44603","inst_44596","inst_44597","js/ArrayBuffer","inst_44598","inst_44599","inst_44600","statearr-44609","statearr-44610","statearr-44611","e44612","statearr-44613","statearr-44614","re-frame.core/dispatch"],"sourcesContent":["(ns mecca.upload\n  (:require\n    [re-frame.core :as rf :refer [subscribe dispatch]]\n    [cljs.core.async :refer [put! chan <! >!]])\n  (:require-macros [cljs.core.async.macros :refer [go go-loop]]))\n\n;; derived from https://mrmcc3.github.io/post/csv-with-clojurescript/\n;; and based on reagent-frontend template. \n\n;; dependencies from project.clj in addition to clojure, clojurescript, and reagent:\n;; [org.clojure/core.async \"0.2.395\"]\n\n;; atom to store file contents\n\n;; transducer to stick on a core-async channel to manipulate all the weird javascript\n;; event objects --- basically just takes the array of file objects or something\n;; that the incomprehensible browser API creates and grabs the first one, then resets things.\n(def first-file\n  (map (fn [e]\n         (let [target (.-currentTarget e)\n               file (-> target .-files (aget 0))]\n           (set! (.-value target) \"\")\n           file))))\n\n;; transducer to get text out of file object.\n(def extract-result\n  (map #(-> % .-target .-result)))\n\n;; two core.async channels to take file array and then file and apply above transducers to them.\n(def upload-reqs (chan 1 first-file))\n(def file-reads (chan 1 extract-result))\n\n;; function to call when a file event appears: stick it on the upload-reqs channel (which will use the transducer to grab the first file)\n(defn put-upload [e]\n  (put! upload-reqs e))\n\n;; sit around in a loop waiting for a file to appear in the upload-reqs channel, read any such file, and when the read is successful, stick the file on the file-reads channel.\n(go-loop []\n  (let [reader (js/FileReader.)\n        file (<! upload-reqs)]\n    (set! (.-onload reader) #(put! file-reads %))\n    (.readAsArrayBuffer reader file)\n    (recur)))\n\n;; sit around in a loop waiting for a string to appear in the file-reads channel and put it in the state atom to be read by reagent and rendered on the page.\n(go-loop []\n  (dispatch [:file-upload (js/ArrayBuffer. (<! file-reads))])\n  (recur))\n"]}
{"version":3,"sources":["mecca/xml.cljs"],"mappings":";;;;AAIA,AAAA,AAAMA,AAAcC;AAApB,AACE,AAAA,AAAU,AAAA,AAACC,AAAI,AAAA,AAAUD;;AAE3B,AAAA,AAAME,AAASC,AAAIC;AAAnB,AACE,AAAA,AAAAC,AAACC;AAAD,AAAS,AAACC,AAAEJ,AAAI,AAAAE,AAAA,AAACG;AACT,AAAA,AAAUJ;;AAEpB,AAAA,AAAMK,AAAeC;AAArB,AACE,AAAA,AAACR,AAAcQ;;AAEjB,AAAA,AAAMC,AAAWC;AAAjB,AACE,AAACC,AAAM,AAAA,AAACX,AAAeU;;AAEzB,AAAA,AAAME,AAAUC,AAAKH;AAArB,AACE,AAACC,AAAM,AAAA,AAAU,AAACA,AAAM,AAACX,AAAQa,AAAKH;;AAExC,AAAA,AAAMI,AAAcJ;AAApB,AACE,AAACK,AAAY,AAAA,AAACH,AAAmBF;;AAEnC,AAAA,AAAMM,AAAWN;AAAjB,AACE,AAACK,AAAY,AAAA,AAACH,AAAgBF;;AAEhC,AAAA,AAAMO,AAAeT,AAAQU;AAA7B,AACE,AAAA,AAAAC,AAACf;AAAD,AAAS,AAACC,AAAEa,AAAM,AAAAC,AAACH;AAAc,AAAA,AAAChB,AAAcQ;;AAElD,AAAA,AAAMY,AAAUC;AAAhB,AACE,AAAA,AAACT,AAAeS;;AAElB,AAAA,AAAMC,AAAYD;AAAlB,AACE,AAACN,AACA,AAAA,AAACH,AAAiBS;;AAErB,AAAA,AAAME,AAAWF;AAAjB,AACE,AAACN,AACA,AAAA,AAACH,AAAgBS;;AAEpB,AAAA,AAAMG,AAAaH;AAAnB,AACE,AAAMI,AAAW,AAAA,AAAM,AAAA,AAAM,AAACH,AAAWD;AACnCK,AAAY,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC;AAEbC,AAAK,AAACR,AAASC;AACfQ,AAAM,AAAA,AAAI,AAACC,AAAK,AAACP,AAAUF,AACnB,AAACE,AAAUF;AALzB,AAOE,AAAA,AAAG,AAACf,AAAIoB,AAAYE,AACjBH,AACAI;;AAEP,AAAA,AAAME,AAAYrB,AAAKsB;AAAvB,AAAA,AAAA,AAAA,AACSA,AACC,AAAG,AAAG,AAACR,AAAY,AAACf,AAAUC,AACxB,AAAAuB,AAAM,AAACjB,AAAUN;AAAjB,AAAA,AAAAuB;AAAA;AAAA;;;;AAAA;;;AAHhB,AAEU,AAIK,AAAAC,AAAM,AAAClB,AAAUN;AAAjB,AAAA,AAAAwB;AAAA;AAAA;;;AAAA;AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD;;;;;AAIf,AAAA,AAAME,AAAe5B,AAAQU;AAA7B,AACE,AAAA,AAAOc;AACAK,AAAM,AAACpB,AAAcT,AAAQU;AADpC,AAEOoB;;AAFP,AAGE,AAAI,AAACC,AAAOF;AACVC;;AACA,AAAO,AAAGN,AAAK,AAAA,AAAG,AAAClB,AAAa,AAACH,AAAM0B;AAChC,AAACG,AAAKH;AACN,AAACI,AAAKH,AAAO,AAACP,AAAW,AAACpB,AAAM0B,AACPL;;;;;;;;;AAEtC,AAAA,AAAMU,AAAaxB;AAAnB,AACE,AAAA,AAAOc;AACAK,AAAM,AAACM,AAAQ,AAAA,AAACE;AAADD;AAAA,AAAM,AAAAA,AAAC3B,AAAgBC;;AAAO,AAACrB,AAAaiD;AADlE,AAEOR;;AAFP,AAGE,AAAI,AAACC,AAAOF;AACVC;;AACA,AAAO,AAAGN,AAAK,AAAA,AAAG,AAAClB,AAAa,AAACH,AAAM0B;AAChC,AAACG,AAAKH;AACN,AAACI,AAAKH,AAAO,AAACP,AAAW,AAACpB,AAAM0B,AACPL","names":["mecca.xml/get-measures","score","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","mecca.xml/get-tag","tag","content","p1__46697#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.get.cljs$core$IFn$_invoke$arity$2","mecca.xml/extract-notes","measure","mecca.xml/get-pitch","note","cljs.core/first","mecca.xml/get-attr","attr","mecca.xml/get-duration","js/parseInt","mecca.xml/get-voice","mecca.xml/extract-voice","voice","p1__46698#","mecca.xml/get-step","pitch","mecca.xml/get-octave","mecca.xml/get-alter","mecca.xml/pitch->midi","base-pitch","pitch-steps","cljs.core/zipmap","step","alter","cljs.core/int?","mecca.xml/parse-note","time","G__46699","G__46700","js/Error","mecca.xml/parse-measure","notes","result","cljs.core/empty?","cljs.core/rest","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","mecca.xml/parse-voice","cljs.core/flatten","p1__46701#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","mecca.score/zelda-parsed"],"sourcesContent":["(ns mecca.xml\n  (:require [mecca.score :refer [zelda-parsed]]\n            [re-frame.core :as rf :refer [subscribe dispatch]]))\n\n(defn get-measures [score]\n  (:content (nth (:content score) 7)))\n\n(defn get-tag [tag content]\n  (filter #(= tag (get % :tag))\n          (:content content)))\n\n(defn extract-notes [measure]\n  (get-tag :note measure))\n\n(defn get-pitch [note]\n  (first (get-tag :pitch note)))\n\n(defn get-attr [attr note]\n  (first (:content (first (get-tag attr note)))))\n\n(defn get-duration [note]\n  (js/parseInt (get-attr :duration note)))\n\n(defn get-voice [note]\n  (js/parseInt (get-attr :voice note)))\n\n(defn extract-voice [measure voice]\n  (filter #(= voice (get-voice %)) (get-tag :note measure)))\n\n(defn get-step [pitch]\n  (get-attr :step pitch))\n\n(defn get-octave [pitch]\n  (js/parseInt \n   (get-attr :octave pitch)))\n\n(defn get-alter [pitch]\n  (js/parseInt \n   (get-attr :alter pitch)))\n\n(defn pitch->midi [pitch]\n  (let [base-pitch (+ 12 (* 12 (get-octave pitch)))\n        pitch-steps (zipmap [\"C\" \"D\" \"E\" \"F\" \"G\" \"A\" \"B\"]\n                            [0 2 4 5 7 9 11])\n        step (get-step pitch)\n        alter (if (int? (get-alter pitch))\n                (get-alter pitch)\n                0)]\n    (+ (get pitch-steps step)\n       base-pitch\n       alter)))\n\n(defn parse-note [note time]\n  {:time time\n   :pitch (+ (+ (pitch->midi (get-pitch note))\n                (case (get-voice note)\n                  5 12\n                  0)) 6)\n   :instrument (case (get-voice note)\n                 5 15\n                 1 14)})\n\n(defn parse-measure [measure voice]\n  (loop [time 1\n         notes (extract-voice measure voice)\n         result []]\n    (if (empty? notes)\n      result\n      (recur (+ time (/ (get-duration (first notes)) 6))\n             (rest notes)\n             (conj result (parse-note (first notes)\n                                      time))))))\n\n(defn parse-voice [voice]\n  (loop [time 1\n         notes (flatten (map #(extract-voice % voice) (get-measures zelda-parsed)))\n         result []]\n    (if (empty? notes)\n      result\n      (recur (+ time (/ (get-duration (first notes)) 6))\n             (rest notes)\n             (conj result (parse-note (first notes)\n                                      time))))))\n"]}
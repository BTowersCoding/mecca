["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$leipzig.melody","~:imports",null,"~:requires",["^ ","~$scale","~$leipzig.scale","^:","^:"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$mapthen",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","~:line",122,"~:column",7,"~:end-line",122,"~:end-column",14,"~:arglists",["~#list",["~$quote",["^G",[["~$f","~$&","~$melodies"]]]]],"~:top-fn",["^ ","~:variadic",true,"~:max-fixed-arity",1,"~:method-params",[["^G",["~$f","^I"]]],"^F",["^G",[["~$f","~$&","^I"]]],"~:arglists-meta",["^G",[null]]]],"^5","~$leipzig.melody/mapthen","^K",true,"^A","resources/public/cljs-out/dev/leipzig/melody.cljc","^E",14,"^J",["^ ","^K",true,"^L",1,"^M",[["^G",["~$f","^I"]]],"^F",["^G",[["~$f","~$&","^I"]]],"^N",["^G",[null]]],"^M",[["^G",["~$f","^I"]]],"~:protocol-impl",null,"^N",["^G",[null]],"^C",1,"^B",122,"^D",122,"^L",1,"~:fn-var",true,"^F",["^G",[["~$f","~$&","^I"]]]],"~$tempo",["^ ","^?",null,"^@",["^ ","^A","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^B",137,"^C",7,"^D",137,"^E",12,"^F",["^G",["^H",["^G",[["~$timing","~$notes"]]]]],"~:doc","Transform both :time and :duration according to timing.\n  e.g. (->> notes (tempo (bpm 120)))"],"^5","~$leipzig.melody/tempo","^K",false,"^A","resources/public/cljs-out/dev/leipzig/melody.cljc","^E",12,"^M",["^G",[["^S","^T"]]],"^P",null,"^N",["^G",[null,null]],"^C",1,"^B",137,"^D",137,"^L",2,"^Q",true,"^F",["^G",["^H",["^G",[["^S","^T"]]]]],"^U","Transform both :time and :duration according to timing.\n  e.g. (->> notes (tempo (bpm 120)))"],"~$bpm",["^ ","^?",null,"^@",["^ ","^A","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^B",4,"^C",7,"^D",4,"^E",10,"^F",["^G",["^H",["^G",[["~$beats"]]]]],"^U","Returns a function that translates a beat number into seconds.\n  e.g. ((bpm 90) 5)"],"^5","~$leipzig.melody/bpm","^K",false,"^A","resources/public/cljs-out/dev/leipzig/melody.cljc","^E",10,"^M",["^G",[["^X"]]],"^P",null,"^N",["^G",[null,null]],"^C",1,"^B",4,"^D",4,"^L",1,"^Q",true,"^F",["^G",["^H",["^G",[["^X"]]]]],"^U","Returns a function that translates a beat number into seconds.\n  e.g. ((bpm 90) 5)"],"~$but",["^ ","^?",null,"^@",["^ ","^A","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^B",90,"^C",7,"^D",90,"^E",10,"^F",["^G",["^H",["^G",[["~$start","~$end","~$variation","^T"]]]]],"^U","Replaces part of a melody with another.\n  e.g. (->> notes (but 2 4 variation))"],"^5","~$leipzig.melody/but","^K",false,"^A","resources/public/cljs-out/dev/leipzig/melody.cljc","^E",10,"^M",["^G",[["^[","^10","^11","^T"]]],"^P",null,"^N",["^G",[null,null]],"^C",1,"^B",90,"^D",90,"^L",4,"^Q",true,"^F",["^G",["^H",["^G",[["^[","^10","^11","^T"]]]]],"^U","Replaces part of a melody with another.\n  e.g. (->> notes (but 2 4 variation))"],"~$having",["^ ","^?",null,"^@",["^ ","^A","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^B",9,"^C",7,"^D",9,"^E",13,"^F",["^G",["^H",["^G",[["~$k","~$values","^T"]]]]],"^U","Zips an arbitrary quality onto a melody.\n  e.g. (->> (rhythm [1 1/2]) (having :drum [:kick :snare]))"],"^5","~$leipzig.melody/having","^K",false,"^A","resources/public/cljs-out/dev/leipzig/melody.cljc","^E",13,"^M",["^G",[["~$k","^14","^T"]]],"^P",null,"^N",["^G",[null,null]],"^C",1,"^B",9,"^D",9,"^L",3,"^Q",true,"^F",["^G",["^H",["^G",[["~$k","^14","^T"]]]]],"^U","Zips an arbitrary quality onto a melody.\n  e.g. (->> (rhythm [1 1/2]) (having :drum [:kick :snare]))"],"~$where",["^ ","^?",null,"^@",["^ ","^A","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^B",61,"^C",7,"^D",61,"^E",12,"^F",["^G",["^H",["^G",[["~$k","~$f","^T"]]]]],"^U","Applies f to the k key of each note in notes, ignoring missing keys.\n  e.g. (->> notes (where :time (bpm 90)))"],"^5","~$leipzig.melody/where","^K",false,"^A","resources/public/cljs-out/dev/leipzig/melody.cljc","^E",12,"^M",["^G",[["~$k","~$f","^T"]]],"^P",null,"^N",["^G",[null,null]],"^C",1,"^B",61,"^D",61,"^L",3,"^Q",true,"^F",["^G",["^H",["^G",[["~$k","~$f","^T"]]]]],"^U","Applies f to the k key of each note in notes, ignoring missing keys.\n  e.g. (->> notes (where :time (bpm 90)))"],"~$is",["^ ","^5","~$leipzig.melody/is","^A","resources/public/cljs-out/dev/leipzig/melody.cljc","^B",47,"^C",1,"^D",47,"^E",8,"^@",["^ ","^A","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^B",47,"^C",6,"^D",47,"^E",8],"^U","Synonym for constantly.\n  e.g. (->> notes (wherever (comp not :part), :part (is :bass)))"],"~$times",["^ ","^?",null,"^@",["^ ","^A","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^B",129,"^C",7,"^D",129,"^E",12,"^F",["^G",["^H",["^G",[["~$n","^T"]]]]],"^U","Repeats notes n times.\n  e.g. (->> bassline (times 4))"],"^5","~$leipzig.melody/times","^K",false,"^A","resources/public/cljs-out/dev/leipzig/melody.cljc","^E",12,"^M",["^G",[["~$n","^T"]]],"^P",null,"^N",["^G",[null,null]],"^C",1,"^B",129,"^D",129,"^L",2,"^Q",true,"^F",["^G",["^H",["^G",[["~$n","^T"]]]]],"^U","Repeats notes n times.\n  e.g. (->> bassline (times 4))"],"~$duration",["^ ","^?",null,"^@",["^ ","^A","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^B",105,"^C",7,"^D",105,"^E",15,"^F",["^G",["^H",["^G",[["^T"]]]]],"^U","Returns the total duration of notes.\n  e.g. (->> melody duration)"],"^5","~$leipzig.melody/duration","^K",false,"^A","resources/public/cljs-out/dev/leipzig/melody.cljc","^E",15,"^M",["^G",[["^T"]]],"^P",null,"^N",["^G",[null,null]],"^C",1,"^B",105,"^D",105,"^L",1,"^Q",true,"^F",["^G",["^H",["^G",[["^T"]]]]],"^U","Returns the total duration of notes.\n  e.g. (->> melody duration)"],"~$all",["^ ","^?",null,"^@",["^ ","^A","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^B",67,"^C",7,"^D",67,"^E",10,"^F",["^G",["^H",["^G",[["~$k","~$v","^T"]]]]],"^U","Sets a constant value for each note of a melody.\n  e.g. (->> notes (all :part :drum))"],"^5","~$leipzig.melody/all","^K",false,"^A","resources/public/cljs-out/dev/leipzig/melody.cljc","^E",10,"^M",["^G",[["~$k","~$v","^T"]]],"^P",null,"^N",["^G",[null,null]],"^C",1,"^B",67,"^D",67,"^L",3,"^Q",true,"^F",["^G",["^H",["^G",[["~$k","~$v","^T"]]]]],"^U","Sets a constant value for each note of a melody.\n  e.g. (->> notes (all :part :drum))"],"~$utter",["^ ","^?",null,"^@",["^ ","^A","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^B",15,"^C",7,"^D",15,"^E",12,"^F",["^G",["^H",["^G",[["~$object","~$time","^1<","~$velocity"]]]]]],"^5","~$leipzig.melody/utter","^K",false,"^A","resources/public/cljs-out/dev/leipzig/melody.cljc","^E",12,"^M",["^G",[["^1A","^1B","^1<","^1C"]]],"^P",null,"^N",["^G",[null,null]],"^C",1,"^B",15,"^D",15,"^L",4,"^Q",true,"^F",["^G",["^H",["^G",[["^1A","^1B","^1<","^1C"]]]]]],"~$before?",["^ ","^?",null,"^@",["^ ","^A","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^B",78,"^C",8,"^D",78,"^E",15,"~:private",true,"^F",["^G",["^H",["^G",[["~$a","~$b"]]]]]],"^1F",true,"^5","~$leipzig.melody/before?","^K",false,"^A","resources/public/cljs-out/dev/leipzig/melody.cljc","^E",15,"^M",["^G",[["~$a","~$b"]]],"^P",null,"^N",["^G",[null,null]],"^C",1,"^B",78,"^D",78,"^L",2,"^Q",true,"^F",["^G",["^H",["^G",[["~$a","~$b"]]]]]],"~$if-applicable",["^ ","^?",null,"^@",["^ ","^A","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^B",52,"^C",8,"^D",52,"^E",21,"^1F",true,"^F",["^G",["^H",["^G",[["~$applies?","~$f"]]]]]],"^1F",true,"^5","~$leipzig.melody/if-applicable","^K",false,"^A","resources/public/cljs-out/dev/leipzig/melody.cljc","^E",21,"^M",["^G",[["^1I","~$f"]]],"^P",null,"^N",["^G",[null,null]],"^C",1,"^B",52,"^D",52,"^L",2,"^Q",true,"^F",["^G",["^H",["^G",[["^1I","~$f"]]]]]],"~$accelerando",["^ ","^?",null,"^@",["^ ","^A","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^B",148,"^C",7,"^D",148,"^E",18,"^F",["^G",["^H",["^G",[["~$from","~$to","~$by"]]]]],"^U","Linearly interpolated change between from and to.\n  e.g. (->> notes (tempo (accelerando 0 4 3/2))))"],"^5","~$leipzig.melody/accelerando","^K",false,"^A","resources/public/cljs-out/dev/leipzig/melody.cljc","^E",18,"^M",["^G",[["^1L","^1M","^1N"]]],"^P",null,"^N",["^G",[null,null]],"^C",1,"^B",148,"^D",148,"^L",3,"^Q",true,"^F",["^G",["^H",["^G",[["^1L","^1M","^1N"]]]]],"^U","Linearly interpolated change between from and to.\n  e.g. (->> notes (tempo (accelerando 0 4 3/2))))"],"~$after",["^ ","^?",null,"^@",["^ ","^A","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^B",73,"^C",7,"^D",73,"^E",12,"^F",["^G",["^H",["^G",[["~$wait","^T"]]]]],"^U","Delay notes by wait.\n  e.g. (->> melody (after 3))"],"^5","~$leipzig.melody/after","^K",false,"^A","resources/public/cljs-out/dev/leipzig/melody.cljc","^E",12,"^M",["^G",[["^1Q","^T"]]],"^P",null,"^N",["^G",[null,null]],"^C",1,"^B",73,"^D",73,"^L",2,"^Q",true,"^F",["^G",["^H",["^G",[["^1Q","^T"]]]]],"^U","Delay notes by wait.\n  e.g. (->> melody (after 3))"],"~$phrase",["^ ","^?",null,"^@",["^ ","^A","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^B",22,"^C",7,"^D",22,"^E",13,"^F",["^G",["^H",["^G",[["~$durations","~$pitches","~$velocities"],["^1T","^1U"]]]]],"^U","Translates a sequence of durations and pitches into a melody.\n  nil pitches signify rests, vectors represent clusters, and maps\n  represent chords. Vector durations represent repeated notes.\n  e.g. (phrase [1/2 1/2 3/2 3/2] [0 1 nil 4])\n  (phrase [1 1 2] [4 3 [0 2]])\n  (phrase [1 [1 2]] [4 3])\n  (phrase (repeat 4) (map #(-> triad (root %))) [0 3 4 3])","^J",["^ ","^K",false,"^L",3,"^M",["^G",[["^1T","^1U","^1V"],["^1T","^1U"]]],"^F",["^G",[["^1T","^1U","^1V"],["^1T","^1U"]]],"^N",["^G",[null,null]]]],"^5","~$leipzig.melody/phrase","^K",false,"^A","resources/public/cljs-out/dev/leipzig/melody.cljc","^E",13,"^J",["^ ","^K",false,"^L",3,"^M",["^G",[["^1T","^1U","^1V"],["^1T","^1U"]]],"^F",["^G",[["^1T","^1U","^1V"],["^1T","^1U"]]],"^N",["^G",[null,null]]],"^M",["^G",[["^1T","^1U","^1V"],["^1T","^1U"]]],"^P",null,"^N",["^G",[null,null]],"^C",1,"^B",22,"^D",22,"^L",3,"^Q",true,"^F",["^G",[["^1T","^1U","^1V"],["^1T","^1U"]]],"^U","Translates a sequence of durations and pitches into a melody.\n  nil pitches signify rests, vectors represent clusters, and maps\n  represent chords. Vector durations represent repeated notes.\n  e.g. (phrase [1/2 1/2 3/2 3/2] [0 1 nil 4])\n  (phrase [1 1 2] [4 3 [0 2]])\n  (phrase [1 [1 2]] [4 3])\n  (phrase (repeat 4) (map #(-> triad (root %))) [0 3 4 3])"],"~$with",["^ ","^?",null,"^@",["^ ","^A","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^B",79,"^C",7,"^D",79,"^E",11,"^F",["^G",["^H",["^G",[[["~$a","~$&","~$other-as","~:as","~$as"],["~$b","~$&","~$other-bs","^1Z","~$bs"]],["^1[","^21","~$&","~$others"]]]]],"^U","Blends melodies.\n  e.g. (->> melody (with bass drums))","^J",["^ ","^K",true,"^L",2,"^M",["^G",[[["~$a","~$&","^1Y","^1Z","^1["],["~$b","~$&","^20","^1Z","^21"]]]],"^F",["^G",[[["~$a","~$&","^1Y","^1Z","^1["],["~$b","~$&","^20","^1Z","^21"]],["^1[","^21","~$&","^22"]]],"^N",["^G",[null,null]]]],"^5","~$leipzig.melody/with","^K",true,"^A","resources/public/cljs-out/dev/leipzig/melody.cljc","^E",11,"^J",["^ ","^K",true,"^L",2,"^M",["^G",[[["~$a","~$&","^1Y","^1Z","^1["],["~$b","~$&","^20","^1Z","^21"]]]],"^F",["^G",[[["~$a","~$&","^1Y","^1Z","^1["],["~$b","~$&","^20","^1Z","^21"]],["^1[","^21","~$&","^22"]]],"^N",["^G",[null,null]]],"^M",["^G",[[["~$a","~$&","^1Y","^1Z","^1["],["~$b","~$&","^20","^1Z","^21"]]]],"^P",null,"^N",["^G",[null,null]],"^C",1,"^B",79,"^D",79,"^L",2,"^Q",true,"^F",["^G",[[["~$a","~$&","^1Y","^1Z","^1["],["~$b","~$&","^20","^1Z","^21"]],["^1[","^21","~$&","^22"]]],"^U","Blends melodies.\n  e.g. (->> melody (with bass drums))"],"~$rhythm",["^ ","^?",null,"^@",["^ ","^A","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^B",41,"^C",7,"^D",41,"^E",13,"^F",["^G",["^H",["^G",[["^1T"]]]]],"^U","Translates a sequence of durations into a rhythm.\n  e.g. (rhythm [1 1 2])"],"^5","~$leipzig.melody/rhythm","^K",false,"^A","resources/public/cljs-out/dev/leipzig/melody.cljc","^E",13,"^M",["^G",[["^1T"]]],"^P",null,"^N",["^G",[null,null]],"^C",1,"^B",41,"^D",41,"^L",1,"^Q",true,"^F",["^G",["^H",["^G",[["^1T"]]]]],"^U","Translates a sequence of durations into a rhythm.\n  e.g. (rhythm [1 1 2])"],"~$then",["^ ","^?",null,"^@",["^ ","^A","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^B",114,"^C",7,"^D",114,"^E",11,"^F",["^G",["^H",["^G",[["~$later","~$earlier"]]]]],"^U","Sequences later after earlier.\n  e.g. (->> call (then response))"],"^5","~$leipzig.melody/then","^K",false,"^A","resources/public/cljs-out/dev/leipzig/melody.cljc","^E",11,"^M",["^G",[["^27","^28"]]],"^P",null,"^N",["^G",[null,null]],"^C",1,"^B",114,"^D",114,"^L",2,"^Q",true,"^F",["^G",["^H",["^G",[["^27","^28"]]]]],"^U","Sequences later after earlier.\n  e.g. (->> call (then response))"],"~$wherever",["^ ","^?",null,"^@",["^ ","^A","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^B",53,"^C",7,"^D",53,"^E",15,"^F",["^G",["^H",["^G",[["^1I","~$k","~$f","^T"]]]]],"^U","Applies f to the k key of each note wherever condition? returns true.\n  e.g. (->> notes (wherever (comp not :part), :part (is :piano))"],"^5","~$leipzig.melody/wherever","^K",false,"^A","resources/public/cljs-out/dev/leipzig/melody.cljc","^E",15,"^M",["^G",[["^1I","~$k","~$f","^T"]]],"^P",null,"^N",["^G",[null,null]],"^C",1,"^B",53,"^D",53,"^L",4,"^Q",true,"^F",["^G",["^H",["^G",[["^1I","~$k","~$f","^T"]]]]],"^U","Applies f to the k key of each note wherever condition? returns true.\n  e.g. (->> notes (wherever (comp not :part), :part (is :piano))"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:time","~:pitch","~:duration","~:otherwise","~:velocity"]],"~:order",["^2A","^2@","^2B","^2D","^2C"]],"^U",null]